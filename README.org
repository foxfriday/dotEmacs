#+TITLE: Emacs Configuration File
#+STARTUP: content

* Introduction

A configuration file for Emacs. When tangled, it creates an early-init.el and an init.el file in the Emacs directory.

* Early Init file
:PROPERTIES:
:header-args: :tangle ~/.emacs.d/early-init.el
:END:

#+begin_src emacs-lisp
(tool-bar-mode   -1)
(menu-bar-mode   -1)
(scroll-bar-mode -1)
(tooltip-mode -1)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

;; Ignore X resources
(advice-add #'x-apply-session-resources :override #'ignore)
#+end_src

* Init file
:PROPERTIES:
:header-args: :tangle ~/.emacs.d/init.el
:END:
** Initialize
*** Garbage Collecting

Increase threshold for garbage collection, and then restore to its initial value once we are done with the initiation process. This should speed up Emacs' start up time a bit.

#+begin_src emacs-lisp
(setq gc-cons-threshold 64000000)
(add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 800000)))
(setq load-prefer-newer t)
#+end_src

*** Straight + Use Package

#+begin_src emacs-lisp
(setq straight-check-for-modifications '(check-on-save))

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; use-package integration
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)  ;; :straight t by default
(straight-use-package 'bind-key)          ;; enable :bind
(setq-default use-package-always-defer t) ;; lazy load all
#+end_src

*** System Dependent Variables

#+begin_src emacs-lisp
;; System
(defconst mar-on-mac (eq system-type 'darwin)
  "Working on a mac.")
(defconst mar-on-linux (eq system-type 'gnu/linux)
  "Working on a linux machine.")

(setq org-directory (if mar-on-mac "~/Dropbox/Org/" "~/Documents/Org/"))

(defvar mar-path-agenda (concat org-directory "agenda/")
  "Path to org agenda folder.")

(defvar mar-path-inbox (concat mar-path-agenda "inbox.org")
  "Path to default inbox file when doing org capture.")

(defvar mar-path-journal (concat mar-path-agenda "journal.org")
  "Path to journal/quick notes files used in org capture.")

(defvar mar-path-library (if mar-on-mac "~/Dropbox/lib/" "~/Documents/lib/")
  "Path to library directory.")

(defvar mar-path-library-cards `(,(concat mar-path-library "cards.bib"))
  "List of path to bibtex file with all the documents.")

(defvar mar-path-library-files `(,(concat mar-path-library "Pdf")
                                 ,(concat mar-path-library "Epub"))
  "List of paths to directories with all the documents.")

(defvar mar-path-llvm (if mar-on-mac "/usr/local/opt/llvm/bin/"
                        "/usr/local/llvm/bin/")
  "Path to llvm binaries.")

(defvar mar-path-clangd (concat mar-path-llvm "clangd")
  "Path to clangd.")

(defvar mar-path-clang-format (concat mar-path-llvm "clang-format")
  "Path to clang format.")

(defvar mar-default-python (if mar-on-mac "3.8.6" "3.8.6")
  "Default Python installation or environment.")

(defvar mar-path-python (if mar-on-mac "/Users/mrincon/.pyenv/versions/3.8.6/bin/"
                          "/usr/local/bin/")
  "Path to Python binaries.")

(defvar mar-path-python-lsp (concat mar-path-python "pyls")
  "Path to the language server for python.")

(defvar mar-path-python-black (concat mar-path-python "black")
  "Path to python's black.")

(defvar mar-path-secrets (concat user-emacs-directory "secrets.el")
  "Path to any non public local variables.")

(if (file-exists-p mar-path-secrets) (load mar-path-secrets))
#+end_src

** Defaults
*** Emacs

#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
;; Default settings
(setq-default indent-tabs-mode nil
              inhibit-startup-screen t
              ring-bell-function 'ignore
              line-spacing 4
              initial-scratch-message "*scratch*\n"
              frame-resize-pixelwise t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(blink-cursor-mode 0)
(fset 'yes-or-no-p 'y-or-n-p)
(show-paren-mode t)
;; Trancient Files
(setq auto-save-default nil
      make-backup-files nil)
#+end_src

*** Project

~Project.el~ is an Emacs core package; however, the one included in some distributions can be old and missing some functions, like ~project-root~ which is used by Eglot.  If the package that comes with Emacs is loaded instead of the one installed with straight, you need to remove it. You can use ~counsel-find-library~ (, s h) and open the file. Then use ~:(buffer-file-name)~ to find the location and delete it. Just make sure you don't remove the one inside the straight directory.

#+begin_src emacs-lisp
(use-package project)
#+end_src

*** Evil + Friends

#+begin_src emacs-lisp
(use-package evil
  :init
  (evil-mode +1)
  ;; Use esc to leave M-x buffers
  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  (global-set-key [escape] 'evil-exit-emacs-state)
  ;; leader key
  (define-prefix-command 'my-leader-map)
  (define-key evil-motion-state-map "," 'my-leader-map)
  ;; menu bindings
  (define-key my-leader-map "M" 'menu-bar-open)
  ;; toggle full frame
  (define-key my-leader-map "tf" 'toggle-frame-fullscreen)
  ;; windows bindings
  (define-key evil-motion-state-map (kbd "C-w f") 'make-frame)
  (define-key evil-motion-state-map (kbd "C-w h") 'evil-window-left)
  (define-key evil-motion-state-map (kbd "C-w j") 'evil-window-down)
  (define-key evil-motion-state-map (kbd "C-w k") 'evil-window-up)
  (define-key evil-motion-state-map (kbd "C-w l") 'evil-window-right)
  (define-key evil-motion-state-map (kbd "C-h") 'evil-window-left)
  (define-key evil-motion-state-map (kbd "C-j") 'evil-window-down)
  (define-key evil-motion-state-map (kbd "C-k") 'evil-window-up)
  (define-key evil-motion-state-map (kbd "C-l") 'evil-window-right)
  (define-key evil-motion-state-map (kbd "C-w _") 'window-swap-states)
  (define-key evil-motion-state-map (kbd "C-w ,") 'evil-window-decrease-width)
  (define-key evil-motion-state-map (kbd "C-w .") 'evil-window-increase-width)
  (define-key evil-motion-state-map (kbd "C-w d") 'evil-window-delete)
  ;; a minimal mode line
  (setq mar-mode-line-format
                '((:eval (propertize evil-mode-line-tag 'face '(:foreground "red")))
                  mode-line-modified              ;; modified
                  "R:"
                  mode-line-remote                ;; local/remote
                  "|"
                  (:eval (alist-get 'name (tab-bar--current-tab)))
                  "|"
                  mode-line-buffer-identification ;; buffer name, etc
                  mode-line-position
                  (vc-mode vc-mode)               ;; git info
                  "|"
                  mode-name
                  mode-line-misc-info))
  (setq evil-mode-line-format nil)
  (setq-default mode-line-position '("|%l:%c|"))
  (setq-default mode-line-format mar-mode-line-format)
  (setq mode-line-format mar-mode-line-format)
  ;; take care of cursors when in terminal mode
  (unless (display-graphic-p)
    (add-hook 'kill-emacs-hook (lambda () (send-string-to-terminal "\e[6 q")))
    (add-hook 'evil-insert-state-entry-hook
              (lambda () (send-string-to-terminal "\e[6 q")))
    (add-hook 'evil-normal-state-entry-hook
              (lambda () (send-string-to-terminal "\e[1 q")))))

(use-package undo-fu
  :init
  (define-key evil-normal-state-map "u" 'undo-fu-only-undo)
  (define-key evil-normal-state-map (kbd "C-r") 'undo-fu-only-redo))

(use-package ace-jump-mode
  :init
  (define-key my-leader-map "jw" 'evil-ace-jump-word-mode)
  (define-key my-leader-map "jl" 'evil-ace-jump-line-mode)
  (define-key my-leader-map "jc" 'evil-ace-jump-char-mode))

;; % to go to matching character
(use-package evil-matchit
  :init (global-evil-matchit-mode 1))

(use-package evil-mc
  :init
  (global-evil-mc-mode 1)
  (define-key my-leader-map "mi" 'evil-mc-make-cursor-in-visual-selection-beg)
  (define-key my-leader-map "ma" 'evil-mc-make-cursor-in-visual-selection-end)
  (define-key my-leader-map "mq" 'evil-mc-undo-all-cursors))

(use-package evil-nerd-commenter
  :init
  ;; toggle comments
  (define-key my-leader-map "tc" 'evilnc-comment-or-uncomment-lines)
  (define-key my-leader-map "tc" 'evilnc-comment-or-uncomment-lines))

(use-package sentence-navigation
  :init
  (define-key evil-motion-state-map ")" 'sentence-nav-evil-forward)
  (define-key evil-motion-state-map "(" 'sentence-nav-evil-backward)
  (define-key evil-motion-state-map "g)" 'sentence-nav-evil-forward-end)
  (define-key evil-motion-state-map "g(" 'sentence-nav-evil-backward-end)
  ;; e.g. das (outer) and dis (inner)
  (define-key evil-outer-text-objects-map "s" 'sentence-nav-evil-a-sentence)
  (define-key evil-inner-text-objects-map "s" 'sentence-nav-evil-inner-sentence))
#+end_src

*** Navigate buffers

#+begin_src emacs-lisp
(defun mar-close-this-buffer ()
  "Close the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))

(defun mar-close-other-buffer ()
  "Close buffer in other window."
  (interactive)
  (unless (one-window-p)
    (other-window 1)
    (kill-this-buffer)
    (if (not (one-window-p))
        (other-window 1))))

(defun mar-close-and-kill-this-pane ()
  "Kill this window and its buffer."
  (interactive)
  (kill-buffer (current-buffer))
  (if (not (one-window-p))
      (delete-window)))

(defun mar-close-and-kill-other-pane ()
  "Kill other window and its buffer."
  (interactive)
  (other-window 1)
  (kill-this-buffer)
  (if (not (one-window-p))
      (delete-window)))

(defun mar-close-and-kill-this-file ()
  "Closes this buffer and delete the associated file."
  (interactive)
  (let ((file (buffer-file-name))
	(buffer (current-buffer)))
    (if file
	(when (yes-or-no-p (concat "Kill " file " ?"))
	  (delete-file file)
	  (kill-buffer buffer)
	  (message "Killed."))
      (error "This buffer is not a file."))))

(defun mar-cleanup-tramp-buffers ()
  "Close all tramp buffers and cleanup connections."
  (interactive)
  (tramp-cleanup-all-buffers)
  (tramp-cleanup-all-connections)
  (switch-to-buffer "*scratch*"))

(defun mar-cleanup-dired-buffers ()
  (interactive)
  "Closes all open dired buffers"
  (mapc (lambda (buffer)
          (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
            (kill-buffer buffer)))
        (buffer-list)))

(defun mar-switch-other-buffer ()
  "Switch to other buffer"
  (interactive)
  (switch-to-buffer (other-buffer)))

(defun mar-refresh-other-buffer ()
  "Refresh other buffer"
  (interactive)
  (unless (one-window-p)
    (other-window 1)
    (revert-buffer :ignore-auto :noconfirm)
    (other-window 1)))

(define-key my-leader-map "kb" 'mar-close-this-buffer)
(define-key my-leader-map "ko" 'mar-close-other-buffer)
(define-key my-leader-map "kB" 'mar-close-and-kill-this-pane)
(define-key my-leader-map "kO" 'mar-close-and-kill-other-pane)
(define-key my-leader-map "KK" 'mar-close-and-kill-this-file)
(define-key my-leader-map "kt" 'mar-cleanup-tramp-buffers)
(define-key my-leader-map "kd" 'mar-cleanup-dired-buffers)
(define-key my-leader-map "o"  'mar-switch-other-buffer)
(define-key my-leader-map "r"  'mar-refresh-other-buffer)
#+end_src

*** Ivy + Friends

You must load Counsel before ivy-prescient.el. This is because loading Counsel results in a number of changes being made to the user options of Ivy, which ivy-prescient.el must then undo.

*TIP:*
Wgrep allows you to edit all files in a grep result.
1) Use counsel-rg or counsel-git-grep to search all files in a project
2) Use C-c C-o to enter ivy-occur mode, followed by 'w' to make the grep results buffer editable
3) Then you can edit the results however you wish, and press C-x C-s to save or C-x C-k to abort.

#+begin_src emacs-lisp
(use-package counsel
  :init
  (counsel-mode 1)
  ;; extra functions
  (defun mar-rg-directory ()
    "rg (wgrep) in a directory"
    (interactive)
    (let* ((dir (read-file-name "Directory:" default-directory))
           (search ""))
      (counsel-rg search dir)))
  ;; help
  (define-key my-leader-map "hv" 'counsel-describe-variable)
  (define-key my-leader-map "hf" 'counsel-describe-function)
  (define-key my-leader-map "hl" 'counsel-find-library)
  (define-key my-leader-map "hu" 'counsel-unicode-char)
  (define-key my-leader-map "hb" 'counsel-descbinds)
  (define-key my-leader-map "ha" 'counsel-apropos)
  ;; search/switch
  (define-key my-leader-map "sm" 'counsel-mark-ring)
  (define-key my-leader-map "sB" 'counsel-bookmark)
  (define-key my-leader-map "sd" 'mar-rg-directory)
  (define-key my-leader-map "sg" 'counsel-git-grep)
  (define-key my-leader-map "sl" 'counsel-locate)
  (if mar-on-linux  (define-key my-leader-map "sa" 'counsel-linux-app))
  ;; kill ring
  (define-key my-leader-map "y" 'counsel-yank-pop)
  ;; find file (project is part of emacs)
  (evil-ex-define-cmd "ef" 'counsel-find-file)
  (evil-ex-define-cmd "er" 'counsel-recentf)
  (evil-ex-define-cmd "ep" 'project-find-file))

(use-package counsel-osx-app
  :if mar-on-mac
  :init
  (define-key my-leader-map "sa" 'counsel-osx-app))

(use-package ivy
  :init
  (ivy-mode 1)
  ;; add recent files and bookmars to switch buffer
  (setq ivy-use-virtual-buffers t)
  ;; shows total in the prompt
  (setq ivy-count-format "(%d/%d) ")
  ;; height of minibuffer
  (setq ivy-height 30)
  ;; minibuffer navigation
  (define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)
  (define-key ivy-minibuffer-map (kbd "<right>") 'ivy-partial-or-done)
  ;; toggle search between regex plus and fuzzy, fuzzy gets more results
  (define-key my-leader-map "ts" 'ivy-toggle-fuzzy)
  ;; search/switch (project is part of emacs)
  (define-key my-leader-map "sb" 'ivy-switch-buffer)
  (define-key my-leader-map "ss" 'swiper-isearch)
  (define-key my-leader-map "sp" 'project-find-regexp)
  (define-key my-leader-map "sr" 'ivy-resume))

;; ivy plugins
(use-package ivy-prescient
  :requires (ivy)
  :init (ivy-prescient-mode 1))

(use-package ivy-rich
  :requires (ivy)
  :init
  (ivy-rich-mode 1)
  (setq ivy-rich-path-style 'abbrev))

;; Edit search results
(use-package wgrep)
#+end_src

*** Pass

By using ~auth-source-pass-enable~ you can use files created with ~pass~ for authentications. That way you may not need a separate authentication file.

*Requirements:*

 - You should have ~pass~ installed in your system.
 - ~Password-store~ comes with ~pass~. The library is usually located in /usr/local/share/emacs/site-lisp.

#+begin_src emacs-lisp
(use-package auth-source-pass
  :straight (:type built-in)
  :init
  (auth-source-pass-enable))

(use-package ivy-pass :requires (ivy password-store))
#+end_src

*** Search Web

#+begin_src emacs-lisp
(use-package engine-mode
  :init
  (engine-mode t)
  (engine/set-keymap-prefix (kbd "C-c s"))
  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")
  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")
  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")
  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w"))
#+end_src

*** Tabs

#+begin_src emacs-lisp
(use-package tab-bar
  :straight (:type built-in)
  :init
  ;; don't show the tabs on top
  (setq tab-bar-show nil)
  (setq tab-bar-new-tab-choice "*scratch*")
  ;; bindings
  (evil-ex-define-cmd "tabnew" 'tab-bar-new-tab)
  (evil-ex-define-cmd "tabclose" 'tab-bar-close-tab)
  (evil-ex-define-cmd "tabonly" 'tab-bar-close-other-tabs)
  (evil-ex-define-cmd "tabrename" 'tab-bar-rename-tab))
#+end_src

*** Very Large Files

#+begin_src emacs-lisp
(use-package vlf :init (require 'vlf-setup))
#+end_src

** Shared Modifiers
*** Auto-Revert

#+begin_src emacs-lisp
(use-package autorevert
  :straight (:type built-in)
  :hook ((org-mode dired-mode) . auto-revert-mode))
#+end_src

*** Company

#+begin_src emacs-lisp
(use-package company
  :hook ((prog-mode tex-mode TeX-mode) . company-mode)
  :bind (:map company-active-map (">" . company-filter-candidates))
  :init
  (defun company-emacs-lisp-mode ()
    "Setup company mode for emacs-lisp-mode"
    (set (make-local-variable 'company-backends)
         '((company-elisp
            company-files
            company-yasnippet
            company-dabbrev-code))))
  (add-hook 'emacs-lisp-mode-hook 'company-emacs-lisp-mode)
  :config
  (setq company-tooltip-limit 10
        company-show-numbers t
        company-selection-wrap-around t
        company-dabbrev-other-buffers t))

(use-package company-math
  :init
  (defun company-latex-mode ()
    "Setup company mode for TeX-mode and tex-mode"
    (set (make-local-variable 'company-backends)
         '((company-math-symbols-latex
            company-latex-commands
            company-yasnippet
            company-dabbrev
            company-files))))
  (add-hook 'TeX-mode-hook 'company-latex-mode)
  (add-hook 'tex-mode-hook 'company-latex-mode))
#+end_src

*** Eglot

#+begin_src emacs-lisp
(use-package eglot
  :hook ((c-mode c++-mode python-mode ess-r-mode) . eglot-ensure)
  :init
  (setq eglot-server-programs
        `((python-mode ,mar-path-python-lsp)
          ((c++-mode c-mode) ,mar-path-clangd)
          (ess-r-mode "R --slave -e languageserver::run()")))
  (setq eglot-autoshutdown t))
#+end_src

*** Line Numbers

#+begin_src emacs-lisp
(use-package display-line-numbers
  :straight (:type built-in)
  :hook ((c-mode c++-mode python-mode ess-r-mode) .
         display-line-numbers-mode)
  :bind ("C-c n" . display-line-numbers-mode)
  :config
  (defun mar-lnumbers ()
    (interactive)
    "Toggle line number styles between absolute and relative"
    (if (equal display-line-numbers 'relative)
        (setq display-line-numbers 'absolute)
      (setq display-line-numbers 'relative)))
  (define-key my-leader-map "n" 'mar-lnumbers))
#+end_src

*** Olivetti and a Small Writing Theme

#+begin_src emacs-lisp
(use-package olivetti
  :init
  (defvar mar-attention-on nil
    "If attention is toggled on")
  (defun mar-toggle-attention ()
    (interactive)
    "Sets on calmer writting environment."
    (if mar-attention-on
        (progn (olivetti-mode -1)
               (setq mode-line-format mar-mode-line-format)
               (setq-local mar-attention-on nil))
      (progn (olivetti-mode +1)
             (setq mode-line-format nil)
             (setq-local mar-attention-on t))))
  (define-key my-leader-map "ta" 'mar-toggle-attention)
  :config
  (setq olivetti-body-width 80))
#+end_src

*** Spelling

*Requirements*

 - Install hunspell using your system's package manager
 - Install dictionaries.

In ~osX~ dictionary files (*.aff and *.dic) should be placed in: ~/Library/Spelling. Homebrew itself provides no dictionaries for Hunspell. In arch you can pacman install them. If you are on a Mac you can download a compatible dictionary from another source, such as [[http://wordlist.sourceforge.net][here]].

#+begin_src emacs-lisp
(use-package flyspell
  :straight (:type built-in)
  :hook
  ((gfm-mode markdown-mode org-mode message-mode) . flyspell-mode))

(use-package ispell
  :config
  (setq ispell-personal-dictionary "~/.config/personal.dic")
  ;; Use Hunspell if available.
  (when (executable-find "hunspell")
    (setq-default ispell-program-name "hunspell")
    (add-to-list 'ispell-skip-region-alist '("^#+begin_src" . "^#+end_src"))
    (add-to-list 'ispell-skip-region-alist '("\begin{equation}" . "\end{equation}"))
    (add-to-list 'ispell-skip-region-alist '("\begin{equation*" . "\end{equation*}"))
    (setq ispell-really-hunspell t)
    (setq ispell-local-dictionary-alist
          '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
    (setq ispell-dictionary "en_US")))
#+end_src

*** Snippets

#+begin_src emacs-lisp
(use-package yasnippet
  :hook ((prog-mode org-mode) . yas-minor-mode)
  :bind (:map yas-minor-mode-map ("TAB" . nil)
                                 ("<tab>" . nil)
                                 ("M-SPC" . 'yas-expand)
                                 ("C-c C-SPC" . 'yas-insert-snippet))
  :config (yas-reload-all))

(use-package yasnippet-snippets :requires yasnippet)

(use-package ivy-yasnippet
  :requires (ivy yasnippet)
  :hook (yas-minor-mode . ivy-yasnippet)
  :bind (("C-c y" . ivy-yasnippet)))
#+end_src

*** Theme + Fonts

#+begin_src emacs-lisp
(use-package faces
  :straight (:type built-in)
  :init
  (defconst mar-font-fp (if mar-on-mac "Menlo" "Inconsolata")
    "Default fix point font")

  (defconst mar-font-vp (if mar-on-mac "Helvetica" "Source Sans Pro")
    "Default variable point font")

  (defun mar-reset-fonts ()
    "Resets fonts to defaults set based on system and monitor"
    (interactive)
    (let* ((height (if (display-graphic-p)
                       (if (> (x-display-pixel-width) 2000) 240 110)
                     110))
           (heigvp (+ height 10)))
      (set-face-attribute 'default nil :family mar-font-fp :height height :weight 'normal)
      (set-face-attribute 'fixed-pitch nil :family mar-font-fp :height height :weight 'normal)
      (set-face-attribute 'variable-pitch nil :family mar-font-vp :height heigvp :weight 'normal)))

  (mar-reset-fonts))

(use-package modus-themes
  :init
  (when (display-graphic-p)
    (modus-themes-load-operandi)))
#+end_src

*** Visual Line

#+begin_src emacs-lisp
(use-package visual-line
  :straight (:type built-in)
  :hook ((gfm-mode markdown-mode org-mode mu4e-view-mode) . visual-line-mode))
#+end_src

*** Variable Pitch

#+begin_src emacs-lisp
(use-package variable-pitch
  :straight (:type built-in)
  :hook (org-mode . variable-pitch-mode))
#+end_src

** Modes
*** Beancounts

#+begin_src emacs-lisp
(use-package beancount
  :straight (:host github :repo "beancount/beancount-mode")
  :magic ("%beancount" . beancount-mode)
  :hook (beancount-mode . outline-minor-mode)
  :bind (:map beancount-mode-map ("C-z" . beancount-tab-dwim)))
#+end_src

*** CMake + C++

*Requirements*:

 - You should have ~llvm~ installed in your system.
 - The language server is ~clangd~. It is usually included with ~llvm~, but may require a separate installation.
 - You should also have ~clang-format~ installed in your system.
 - ~CMake-mode~ comes packaged with ~CMake~. The library is usually located in /usr/local/share/emacs/site-lisp.

*Problems*

I never managed to make ~cmake-mode~ auto load when opening a file. And I tried a lot of things. The solution is to specify the mode as a comment in the first line of the file:

#-*-cmake-*-

#+begin_src emacs-lisp
(use-package cmake-mode
  :straight nil
  :commands (cmake-mode))

(use-package clang-format+
  :hook ((c-mode c++-mode) . clang-format+-mode)
  :config
  (setq clang-format-executable mar-path-clang-format))

(use-package modern-cpp-font-lock
  :hook (c++-mode . modern-c++-font-lock-mode))
#+end_src

*** Csv

#+begin_src emacs-lisp
(use-package csv-mode :mode ("\\.csv\\'" "\\.tab\\'"))
#+end_src

*** Json

#+begin_src emacs-lisp
(use-package json-mode)
#+end_src

*** LaTeX

#+begin_src emacs-lisp
(use-package auctex :straight (:type built-in))
#+end_src

*** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode (("README.md" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

*** Python

*Requirements*:
pyenv
pip install --upgrade 'python-language-server[all]'
pip install --upgrade black

#+begin_src emacs-lisp
(use-package python
  :hook (inferior-python-mode . evil-emacs-state)
  :config (setq python-indent-guess-indent-offset nil))

(use-package blacken
  :hook (python-mode . blacken-mode)
  :config
  (setq blacken-executable mar-path-python-black)
  (setq blacken-line-length 79))

(use-package pyenv-mode
  :hook (python-mode . mar-try-set-pyenv)
  :commands (pyenv-mode-version)
  :init
  (defun mar-run-ipython ()
    "Try to run ipython if present in a suitable environment"
    (interactive)
    (let ((python-shell-interpreter "ipython")
          (python-shell-interpreter-args "--simple-prompt -i"))
      (unless (pyenv-mode-version)
        (call-interactively #'pyenv-mode-set))
      (run-python)))

  (defun mar-try-set-pyenv ()
    "try to start a default environment"
    (pyenv-mode 1)
    (unless (pyenv-mode-version)
      (if (member mar-default-python (pyenv-mode-versions))
          (pyenv-mode-set mar-default-python)
        (message "WARNING: Default pyenv not found (see pyenv-mode)")))))

(use-package python-cell)
#+end_src

*** R

*Requirements*

 - ~R~ needs to be installed in the system. In a mac, you can use brew.
 - You also need to install the linter inside ~R~:

  ~install.packages('lintr')~

 - Eglot requires the language server:

  ~install.packages("languageserver")~

 - Jupyter requires the ~IRkernell~:

  ~install.packages('IRkernel')~
  ~IRkernel::installspec()~


#+begin_src emacs-lisp
(use-package ess :mode ("\\.R\\'" . ess-r-mode))
#+end_src

** Apps
*** Email

For this to work you need the different packages working together. We send email using ~smptmail~, which is build in. To download the mail we use ~mbsync~, which is a command line application with its own separate configuration file. Finally, you need ~mu~, which is also a command line application with an Emacs's library. If you want to set up a default smpt configuration, you need to set the following variables:

     ~smtpmail-default-smtp-server~
     ~smtpmail-smtp-server~
     ~smtpmail-smtp-user~
     ~smtpmail-smtp-service~

In addition, you may want to set up the ~user-mail-address~ and ~user-full-name~ variables.

*Requirements*

*For mbsync:*

 - This needs to be installed with the system's package manager. It also need a configuration file. See ~man mbsync~.

*For mu:*

 - Install or upgrade ~mu~ to the latest stable version. You install it with your system package manager.
 - Run ~mu init~ in a terminal making sure ~mu init~ points to the right Maildir folder and add your email address(es) the following way:

      ~mu init --maildir=~/Maildir --my-address=jim@example.com --my-address=bob@example.com~

 - Once this is done, run ~mu index~
 - Delete the old mail cache
 - Mu usually adds the Emacs package in /usr/local/share/emacs/site-lisp.

#+begin_src emacs-lisp
;; Send mail
(use-package smptmail
  :straight (:type built-in)
  :init (setq message-send-mail-function 'smtpmail-send-it))

;; Get mail
(use-package mu4e
  :straight nil
  :commands (mu4e)
  :config
  (setq mail-user-agent 'mu4e-user-agent)
  ;; paths are relative to root, (see mu info)
  (setq mu4e-sent-folder "/maro/Sent"
        mu4e-drafts-folder "/maro/Drafts"
        mu4e-trash-folder "/maro/Deleted")
  ;; shortcuts
  (setq mu4e-maildir-shortcuts '((:maildir "/maro/inbox" :key ?i)
                                 (:maildir "/maro/Sent"  :key ?s)))
  ;; get mail:
  (setq mu4e-get-mail-command "mbsync -a"
        mu4e-update-interval 120)
  ;; read mail:
  (setq message-kill-buffer-on-exit t
        mu4e-view-show-addresses t
        mu4e-change-filenames-when-moving t
        mu4e-headers-date-format "%Y-%m-%d %H:%M"
        mu4e-compose-format-flowed t
        mu4e-html2text-command "html2text"
        mu4e-attachment-dir  "~/Downloads")
  ;; Open email in browser by pressing a and selecting the action.
  (add-to-list 'mu4e-headers-actions
               '("in browser" . mu4e-action-view-in-browser) t)
  (add-to-list 'mu4e-view-actions
               '("in browser" . mu4e-action-view-in-browser) t))
#+end_src

*** Elfeed

#+begin_src emacs-lisp
(use-package elfeed
  :bind ("C-c e" . elfeed)
  :config
  ;; database
  (setq elfeed-db-directory (concat user-emacs-directory "elfeeddb"))
  ;; helper functions
  (defun mar-elfeed-kill-entry ()
    "Kill buffer and go back to elfeed search."
    (interactive)
    (elfeed-kill-buffer)
    (switch-to-buffer "*elfeed-search*"))
  ;; bindings
  (evil-define-key 'normal elfeed-show-mode-map
    "q" 'mar-elfeed-kill-entry)
  (evil-define-key 'normal elfeed-search-mode-map
    (kbd "<RET>") 'elfeed-search-show-entry
    "u" 'elfeed-search-tag-all-unread
    "r" 'elfeed-search-fetch
    "m" 'elfeed-search-untag-all-unread
    "b" 'elfeed-search-browse-url
    "q" 'kill-this-buffer))
#+end_src

*** Vterm

*Requirements*

 - Install ~libvterm~ using the system's package manager.
 - You need to add some lines to your .zshrc. Go to vterms's page for a list.

*Caveats*

Vterm doesn't work well with evil. But if your zsh is already vimified that's not an issue. The only clash is that I rebounded ~C-h~ to evil window left on Emacs state, which disables the usual help search.

#+begin_src emacs-lisp
(use-package vterm
  :hook (vterm-mode . evil-emacs-state)
  :bind (:map vterm-mode-map
              ("C-h" . evil-window-left)
              ("C-j" . evil-window-down)
              ("C-k" . evil-window-up)
              ("C-l" . evil-window-right)))
#+end_src

** File Managers
*** Dired + Friends

#+begin_src emacs-lisp
(use-package dired
  :straight (:type built-in)
  :init
  ;; mac ls doesn't support ls --dired
  (if mar-on-mac (setq dired-use-ls-dired nil))
  :config
  (setq delete-by-moving-to-trash nil
        dired-dwim-target t)
  (evil-define-key 'normal dired-mode-map
    ;; Navigation
    ";s" 'dired-sort-toggle-or-edit ;; sort by name or date
    ";h" 'dired-hide-details-mode ;; show/hide details
    ";f" 'dired-show-file-type
    "za" 'dired-subtree-toggle
    "r" 'revert-buffer
    ;; Actions
    ";a" 'gnus-dired-attach
    ";cp" 'dired-do-copy ;; if multiple files, to new dir
    ";mv" 'dired-do-rename ;; if multiple files, move to dir
    "+" 'dired-create-directory
    ";z" 'dired-do-compress ;; compress/extract each file
    ";Z" 'dired-do-compress-to ;; compress to dir (name needs extension)
    ";=" 'dired-diff
    ";U" 'dired-upcase
    ";u" 'dired-downcase
    ;; Mark
    "d" 'dired-flag-file-deletion
    "m" 'dired-mark
    "u" 'dired-unmark
    "U" 'dired-unmark-all-marks
    "q" 'kill-this-buffer))

;; pluggins
(use-package dired-subtree
  :config (setq dired-subtree-line-prefix "->  "))

(use-package diredfl
  :hook (dired-mode . diredfl-mode))

(use-package gnus-dired
  :straight (:type built-in)
  :hook (dired-mode . gnus-dired-mode))
#+end_src

*** Magit

#+begin_src emacs-lisp
(use-package magit
  :hook (magit-mode . evil-emacs-state)
  :bind (:map magit-status-mode-map ("q" . mar-close-magit-buffers))
  :config
  (setq magit-diff-options '("-b"))
  ;; https://www.manueluberti.eu/emacs/2018/02/17/magit-bury-buffer/
  (defun mar-close-magit-buffers ()
    "Restore window configuration and kill all Magit buffers."
    (interactive)
    (let ((buffers (magit-mode-get-buffers)))
      (magit-restore-window-configuration)
      (mapc #'kill-buffer buffers))))
#+end_src

*** Bibtex

#+begin_src emacs-lisp
(use-package bibtex
  :config (setq bibtex-align-at-equal-sign t
                bibtex-entry-format t))

(use-package ivy-bibtex
  :requires (ivy)
  :config
  ;; paths
  (setq bibtex-completion-bibliography mar-path-library-cards
        bibtex-completion-library-path mar-path-library-files
        bibtex-completion-notes-path (concat org-directory "book-notes/"))
  ;; completion
  (setq bibtex-completion-pdf-extension '(".pdf" ".epub")
        bibtex-completion-pdf-symbol "#"
        bibtex-completion-notes-symbol "*"
        bibtex-completion-notes-extension ".org"
        bibtex-completion-notes-template-multiple-files "#+TITLE: ${author-or-editor} (${year}): ${title}\n"
        bibtex-completion-additional-search-fields '(keywords)
        bibtex-completion-format-citation-functions
        '((org-mode      . bibtex-completion-format-citation-org-title-link-to-PDF)
          (latex-mode    . bibtex-completion-format-citation-cite)
          (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
          (default       . bibtex-completion-format-citation-default)))
  ;; open with
  (defun mar-bibtex-open-function (fpath)
    (let* ((extension (file-name-extension fpath)))
      (cond ((string= extension "pdf") (call-process "open" nil 0 nil "-a" "skim" fpath))
            ((string= extension "epub") (call-process "open" nil 0 nil "-a" "books" fpath))
            (t (find-file fpath)))))
  (setq bibtex-completion-pdf-open-function 'mar-bibtex-open-function))
#+end_src

** Other
*** Async

#+begin_src emacs-lisp
(use-package async)
#+end_src

*** Jupyter

#+begin_src emacs-lisp
(use-package jupyter)
#+end_src

** Org
*** Base

#+begin_src emacs-lisp
(use-package org
  :straight (:type built-in)
  :mode (("\\.txt\\'" . org-mode))
  :config
  (require 'org-crypt)
  ;; paths
  (setq org-agenda-files `(,mar-path-agenda)
        org-archive-location (concat mar-path-agenda "archive/%s::datetree/")
        org-preview-latex-image-directory (concat org-directory "images/"))
  ;; nicer dashes
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 ()
                                  (compose-region
                                   (match-beginning 1) (match-end 1) "•"))))))
  ;; make latex fragments larger
  (setq org-format-latex-options
        (plist-put org-format-latex-options :scale 2.5))
  ;; To find the name of an element: C-u C-x =
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-tag nil :inherit 'fixed-pitch :height 0.8 :foreground "blue")
  (set-face-attribute 'org-verbatim nil :inherit 'fixed-pitch :foreground "red")
  ;; refile
  (setq org-refile-targets '((nil :maxlevel . 1) ;; default curent file
                             (org-agenda-files :maxlevel . 1)))
  ;; some ergonomics
  (setq-default org-catch-invisible-edits 'smart
                org-return-follows-link t
                org-indent-indentation-per-level 1
                org-adapt-indentation nil
                org-hide-leading-stars t
                org-hide-emphasis-markers t
                org-highlight-latex-and-related '(latex)
                org-log-into-drawer t)
  ;; Todo stuff
  (setq org-todo-keywords '((sequence
                             "NEXT(n)" "TODO(t)" "WAITING(w)" "|" "DONE(d)")))
  ;; Insert closed time when done, and remove it if not done
  (setq org-log-done 'time)
  ;; Effort (max for day), if more than 2hrs, it should be a different task
  (setq org-global-properties
        '(("Effort_ALL" .
           "0:15 0:30 0:45 1:00 2:00 0:00")))
  ;;        1    2    3    4    5    0
  ;; column view
  (setq org-columns-default-format
        "%50ITEM(Task) %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM")
  ;; tags
  (setq org-tag-alist '((:startgroup . nil)
                        ("other" . ?o) ("finance" . ?f) ("health" . ?h)
                        ("math" . ?m) ("nice" . ?n) ("remodel" . ?r)
                        (:endgroup . nil)
                        ("project" . ?p)
                        ("work" . ?w)
                        ("crypt" . ?c)))
  ;; bindings
  (evil-define-key 'normal org-mode-map
    ;; base
    ",d" 'org-decrypt-entry
    ",D" 'org-decrypt-entries
    "T" 'org-set-tags-command
    "za" 'org-cycle
    "J" 'org-up-element
    "K" 'org-down-element
    "L" 'org-latex-preview))
#+end_src

*** Agenda

#+begin_src emacs-lisp
(use-package org-agenda
  :straight (:type built-in)
  :bind ("C-c a" . org-agenda)
  :init
  ;; For org-agenda this doesn't seem to work as a hook
  (evil-set-initial-state 'org-agenda-mode 'motion)
  :config
  ;; habits
  (require 'org-habit)
  (setq org-habit-show-habits-only-for-today t)
  ;; files
  (setq org-agenda-file-regexp "\\`[^.].*\\(\\.txt\\|\\.org\\)\\'")
  ;; ergonomics
  (setq org-deadline-warning-days 3
        org-agenda-skip-scheduled-if-deadline-is-shown t
        org-agenda-window-setup 'current-window)
  ;; stuck projects
  (setq org-stuck-projects
        '("+LEVEL=1+project/-TODO-DONE" ("NEXT" "WAITING")))
  ;;custom agenda
  (defun mar-org-agenda-skip-if-habit ()
    "Skip an agenda entry if habit"
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))
  ;; Agenda clock report (R) - Shows only in the agenda - last two weeks
  (setq org-agenda-clockreport-parameter-plist
        '(:link t :maxlevel 6 :block thisweek-2 :fileskip0 t :compact t :narrow 60 :score 0))
  (setq org-agenda-custom-commands
        '(("g" "Agenda and Home-related tasks"
           ((agenda "" ((org-agenda-span 14)))
            (tags-todo "-work&-inbox&-TODO=\"WAITING\"&-TODO=\"TODO\""
                       ((org-agenda-skip-function
                         '(or (org-agenda-skip-if nil '(scheduled))
                              (mar-org-agenda-skip-if-habit)))
                        (org-agenda-overriding-header "Personal")))
            (tags-todo "work&-TODO=\"WAITING\"&-TODO=\"TODO\""
                       ((org-agenda-skip-function
                         '(or (org-agenda-skip-if nil '(scheduled))
                              (mar-org-agenda-skip-if-habit)))
                        (org-agenda-overriding-header "Work")))
            (todo "WAITING" ((org-agenda-overriding-header "Waiting")))
            (tags "inbox" ((org-agenda-overriding-header "Inbox")))
            (todo "TODO" ((org-agenda-overriding-header "Todo")))))))
  ;; keys
  (evil-define-key 'motion org-agenda-mode-map
    ;; base
    (kbd "<return>") 'org-agenda-goto
    "za" 'org-agenda-entry-text-mode
    (kbd "<M-up>") 'org-agenda-drag-line-backward
    (kbd "<M-down>") 'org-agenda-drag-line-forward
    "R" 'org-agenda-clockreport-mode
    "dd" 'org-agenda-kill
    "a" 'org-agenda-archive-default-with-confirmation
    "t" 'org-agenda-set-tags
    "n" 'org-agenda-add-note
    "s" 'org-save-all-org-buffers
    "l" 'org-agenda-open-link
    "cc" 'org-agenda-columns
    "u" 'org-agenda-undo
    "q" 'org-agenda-quit
    "x" 'org-agenda-exit
    ;; navigate
    "J" 'org-agenda-later
    "K" 'org-agenda-earlier
    "M" 'org-agenda-month-view
    "T" 'org-agenda-goto-today
    "R" 'org-agenda-reset-view
    ;; clocking
    "i" 'org-agenda-clock-in
    "o" 'org-agenda-clock-out
    ;; bulk actions
    "x" 'org-agenda-bulk-action
    "m" 'org-agenda-bulk-toggle
    "U" 'org-agenda-bulk-unmark-all
    ;; refresh
    "r" 'org-agenda-redo))
#+end_src

*** Babel

For a comprehensive list of supported languages, see [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][here]].

#+begin_src emacs-lisp
(use-package ob-async
  :after ob
  :init
  (setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-R")))

(use-package ob
  :straight (:type built-in)
  :init
  (add-hook 'org-babel-after-execute-hook #'org-display-inline-images)
  :config
  (setq-default org-confirm-babel-evaluate nil)
  (add-to-list 'org-src-lang-modes '("jupyter-python" . python))
  (add-to-list 'org-src-lang-modes '("jupyter-R" . ess-r-mode))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sqlite . t)
     (makefile . t)
     (dot . t)
     (R . t)
     (shell . t)
     (python . t)
     ;; jupyter should be loaded last
     (jupyter . t)))
  ;; default headers
  (setq org-babel-default-header-args:jupyter-python
        '((:async . "yes")
          (:session . "py")
          (:kernel . "python3.8.6")
          (:results . "raw drawer")
          (:display . "image/png text/plain text/html")))
  (setq org-babel-default-header-args:jupyter-R
        '((:async . "yes")
          (:session . "R")
          (:kernel . "ir"))))
#+end_src

*** Capture

#+begin_src emacs-lisp
(use-package doct :commands (doct))

(use-package org-capture
  :straight (:type built-in)
  :bind ("C-c c" . org-capture)
  :hook (org-capture-mode . evil-insert-state)
  :config
  (setq org-capture-templates
        (doct '(("Todo" :keys "t"
                 :file mar-path-inbox
                 :headline "Inbox"
                 :template ("* %{todo-state} %^{Description} %^g"
                            "DEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+1m\"))"
                            ":PROPERTIES:"
                            ":CREATED: %u"
                            ":END:"
                            "%?")
                 :children (("Next" :keys "n" :todo-state "NEXT")
                            ("Todo" :keys "t" :todo-state "TODO")
                            ("Waiting" :keys "w" :todo-state "WAITING")))
                ("Linked" :keys "l"
                 :file mar-path-inbox
                 :headline "Inbox"
                 :template ("* %{todo-state} %^{Description} %^g"
                            "DEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+1m\"))"
                            ":PROPERTIES:"
                            ":CREATED: %u"
                            ":LINK:    %a"
                            ":END:"
                            "%?")
                 :children (("Next" :keys "n" :todo-state "NEXT")
                            ("Todo" :keys "t" :todo-state "TODO")))
                ("Journal" :keys "j"
                 :file mar-path-journal
                 :datetree t)))))
#+end_src

*** Crypt

To use a default key, set the ~org-crypt-key~ variable.

#+begin_src emacs-lisp
(use-package org-crypt
  :straight (:type built-in)
  :config
  (epa-file-enable)
  (org-crypt-use-before-save-magic)
  (setq org-crypt-disable-auto-save t)
  (setq org-tags-exclude-from-inheritance (quote("crypt"))))
#+end_src

*** Src

#+begin_src emacs-lisp
(use-package org-src
  :straight (:type built-in)
  :config
  (setq-default org-edit-src-content-indentation 0
                org-src-window-setup 'current-window
                org-src-tab-acts-natively t
                org-src-fontify-natitvely t))
#+end_src

The end...
